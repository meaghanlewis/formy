<link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
<br />
<h1>Autocomplete</h1>

<form>
  <div class="form-group">
    <div class="col-sm-8 col-sm-offset-2">
      <strong><label for="autocomplete">Address</label></strong>
      <input type="text" class="form-control" id="autocomplete" onFocus="geolocate()" placeholder="Enter address">
    </div>
    <div class="col-sm-4 col-sm-offset-2">
      <strong><label>Street address</label></strong>
      <input type="text" class="form-control" id="street_number" placeholder="Street address">
    </div>
    <div class="col-sm-4">
      <strong><label>Street address 2</label></strong>
      <input type="text" class="form-control" id="route" placeholder="Street address 2">
    </div>
    <div class="col-sm-4 col-sm-offset-2">
      <strong><label>City</label></strong>
      <input type="text" class="form-control" id="locality" placeholder="City">
    </div>
    <div class="col-sm-4">
      <strong><label>State</label></strong>
      <input type="text" class="form-control" id="administrative_area_level_1" placeholder="State">
    </div>
    <div class="col-sm-4 col-sm-offset-2">
      <strong><label>Zip code</label></strong>
      <input type="text" class="form-control" id="postal_code" placeholder="Zip code">
    </div>
    <div class="col-sm-4">
      <strong><label>Country</label></strong>
      <input type="text" class="form-control" id="country" placeholder="Country">
    </div>
  </div>
</form>
<script>
var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }
      function fillInAddress() {
              // Get the place details from the autocomplete object.
              var place = autocomplete.getPlace();

              for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
              }

              // Get each component of the address from the place details
              // and fill the corresponding field on the form.
              for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                  var val = place.address_components[i][componentForm[addressType]];
                  document.getElementById(addressType).value = val;
                }
              }
      }
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
</script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDmvgnacHEJbWVi4qgZJTWtDLDrEcXHudk&libraries=places&callback=initAutocomplete"></script>
